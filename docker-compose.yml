version: '3' # 标示语法版本
services:  # 多个容器的集合
  user_server:  # 8030
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - service=user_service
    links:
      - db
      - zipkin
    volumes:
      - "${PWD}/user_service:/service"
      - "${PWD}/sanicms:/service/sanicms"
    ports: # 对外暴露的端口
      - "8030:8030"
    networks:
      - sanic-network
    environment:  # 环境变量配置 主要用于settings文件中的读取默认的环境变量
      POSTGRES_SERVICE_DB_NAME: postgres
      POSTGRES_SERVICE_USER: postgres
      POSTGRES_SERVICE_HOST: db
      POSTGRES_SERVICE_PORT: 5432
      ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      ACCESS_CONTROL_ALLOW_HEADERS: "Content-Type"
      ACCESS_CONTROL_ALLOW_METHODS: "POST, PUT, DELETE, GET"
      ZIPKIN_SERVER: 'http://zipkin:9411/api/v1/spans'  # 这里使用别名链接了link
      CONSUL_AGENT_HOST: 'consul'
      CONSUL_AGENT_PORT: 8500
      #command: python -m sanic server.app --host=0.0.0.0 --port=8000 --workers=4
    depends_on: # 解决容器间相互依赖的问题 必须先启动zipkin
      - "db"
      - "role_server"
#      - "zipkin"  # 多余 脚本中已经先启用了
    command: ["python", "-m", "server"]    # 容器构建完毕默认执行的命令
    #command: ["python", "-m", 'sanic', "service.server.app", "--workers=4", "--port=8000", "--host=0.0.0.0"]

  order_server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - service=order_server
    links:
      - db
      - zipkin
    volumes:
      - "${PWD}/order_server:/service"
      - "${PWD}/sanicms:/service/sanicms"
    ports:
      - "8060:8060"
    networks:
      - sanic-network
    environment:
      POSTGRES_SERVICE_DB_NAME: postgres
      POSTGRES_SERVICE_USER: postgres
      POSTGRES_SERVICE_HOST: db
      POSTGRES_SERVICE_PORT: 5432
      ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      ACCESS_CONTROL_ALLOW_HEADERS: "Content-Type"
      ACCESS_CONTROL_ALLOW_METHODS: "POST, PUT, DELETE, GET"
      ZIPKIN_SERVER: 'http://zipkin:9411/api/v1/spans'
      CONSUL_AGENT_HOST: 'consul'
      CONSUL_AGENT_PORT: 8500
      #command: python -m sanic server.app --host=0.0.0.0 --port=8000 --workers=4
    depends_on:
      - "db"
      - "user_server"
    command: ["python", "-m", "server"]
    #command: ["python", "-m", 'sanic', "service.server.app", "--workers=4", "--port=8000", "--host=0.0.0.0"]

#  pay_server:
#    build:
#      context: .
#      dockerfile: Dockerfile
#      args:
#        - service=pay_server
#    links:
#      - db
#      - zipkin
#    volumes:
#      - "${PWD}/pay_server:/service"
#      - "${PWD}/sanicms:/service/sanicms"
#    ports:
#      - "8070:8070"
#    networks:
#      - sanic-network
#    environment:
#      POSTGRES_SERVICE_DB_NAME: postgres
#      POSTGRES_SERVICE_USER: postgres
#      POSTGRES_SERVICE_HOST: db
#      POSTGRES_SERVICE_PORT: 5432
#      ACCESS_CONTROL_ALLOW_ORIGIN: "*"
#      ACCESS_CONTROL_ALLOW_HEADERS: "Content-Type"
#      ACCESS_CONTROL_ALLOW_METHODS: "POST, PUT, DELETE, GET"
#      ZIPKIN_SERVER: 'http://zipkin:9411/api/v1/spans'
#      CONSUL_AGENT_HOST: 'consul'
#      CONSUL_AGENT_PORT: 8500
#      #command: python -m sanic server.app --host=0.0.0.0 --port=8000 --workers=4
#    depends_on:
#      - "db"
#      - "role_server"
#    command: ["python", "-m", "server"]
#    #command: ["python", "-m", 'sanic', "service.server.app", "--workers=4", "--port=8000", "--host=0.0.0.0"]

  region_server:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - service=region_service
    links:
      - db
      - zipkin
    volumes:
      - "${PWD}/region_service:/service"
      - "${PWD}/sanicms:/service/sanicms"
    ports:
      - "8050:8050"
    networks:
      - sanic-network
    environment:
      POSTGRES_SERVICE_DB_NAME: postgres
      POSTGRES_SERVICE_USER: postgres
      POSTGRES_SERVICE_HOST: db
      POSTGRES_SERVICE_PORT: 5432
      ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      ACCESS_CONTROL_ALLOW_HEADERS: "Content-Type"
      ACCESS_CONTROL_ALLOW_METHODS: "POST, PUT, DELETE, GET"
      ZIPKIN_SERVER: 'http://140.143.228.216:9411/api/v1/spans'
      CONSUL_HTTP_ADDR: 'consul:8500'
      #command: python -m sanic server.app --host=0.0.0.0 --port=8000 --workers=4
    depends_on:
      - "db"
      - "zipkin"
    command: ["python", "-m", "server"]
    #command: ["python", "-m", 'sanic', "service.server.app", "--workers=4", "--port=8000", "--host=0.0.0.0"]

  role_server:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - service=role_service
    links:
      - db
      - zipkin
    volumes:
      - "${PWD}/role_service:/service"
      - "${PWD}/sanicms:/service/sanicms"      
    ports:
      - "8020:8020"
    networks:
      - sanic-network
    environment:
      POSTGRES_SERVICE_DB_NAME: postgres
      POSTGRES_SERVICE_USER: postgres
      POSTGRES_SERVICE_HOST: db
      POSTGRES_SERVICE_PORT: 5432
      ACCESS_CONTROL_ALLOW_ORIGIN: "*"
      ACCESS_CONTROL_ALLOW_HEADERS: "Content-Type"
      ACCESS_CONTROL_ALLOW_METHODS: "POST, PUT, DELETE, GET"
      ZIPKIN_SERVER: 'http://140.143.228.216:9411/api/v1/spans'
      CONSUL_HTTP_ADDR: 'consul:8500'
      #command: python -m sanic server.app --host=0.0.0.0 --port=8000 --workers=4
    depends_on:
      - "db"
      - "region_server"
      - "zipkin"
    command: ["python", "-m", "server"]
    #command: ["python", "-m", 'sanic', "service.server.app", "--workers=4", "--port=8000", "--host=0.0.0.0"]

  db:
    image: "postgres:9.6"
    ports:
      # HOST:CONTAINER
      - "55432:5432"
    networks:
      - sanic-network

#  mysql_db:
#    image: "mysql:5.6"
#    ports:
#      # HOST:CONTAINER
#      - "33306:3306"
#    networks:
#      - sanic-network

  zipkin:
    image: "openzipkin/zipkin:2.4.2"
    ports:
      - "9410:9410"
      - "9411:9411"
    networks:
      - sanic-network

  swagger:
    image: "swaggerapi/swagger-ui:v3.0.5"
    ports:
      - "8090:8080"
    networks:
      - sanic-network
    environment:
      API_URL: "http://localhost:8030/openapi/spec.json"

  consul-agent-1: &consul-agent # IP .0.7
    image: "consul:1.4.0"
    networks:
      - sanic-network
    # depends_on:
    #   - consul
    # environment: 
    #   - CONSUL_BIND_INTERFACE:eth0
    command: "agent -retry-join consul -client 0.0.0.0"

  consul-agent-2:   # IP .0.9
    <<: *consul-agent

  consul-server-1: &consul-server # IP .0.6
    <<: *consul-agent
    command: "agent -server -retry-join consul -client 0.0.0.0"
  
  consul-server-2: # IP .0.5
    <<: *consul-server

  consul: # consul-server-bootstrap # IP .0.8
    <<: *consul-agent
    ports:
      - "8400:8400"
      - "8500:8500"
      - "8600:8600"
      - "8600:8600/udp"
    command: "agent -server -bootstrap-expect 3 -ui -client 0.0.0.0"
    # command: ["consul", "agent", "-dev"]

networks:
  sanic-network:
    driver: bridge
